{"version":3,"sources":["Question.js","Instruction.js","FocusableEnableableTextInput.js","Progress.js","AlfaUtils.js","App.js","index.js"],"names":["QuestionCss","css","Question","props","letter","InstructionsCss","instructionText","inputFormStyle","InnerTextInput","React","forwardRef","ref","type","value","onChange","e","target","toUpperCase","disabled","enabled","FocusableEnableableTextInput","useRef","useEffect","current","giveFocus","focus","blur","wrapperStyle","outerStyle","innerStyle","time","onAnimationEnd","console","log","alphabet","Array","fill","map","c","i","String","fromCharCode","charCodeAt","questions","slice","length","getRandomQuestionLetter","min","max","Math","ceil","floor","random","getCorrectPreLetter","questionLetter","appStyle","appHeaderCss","playfieldStyle","initialStateInit","gameState","preLetter","postLetter","preLetterFocus","postLetterFocus","preLetterEnabled","postLetterEnabled","reducer","state","action","correctPreLetter","correctPreLetter2","correctPostLetter","App","useReducer","dispatch","setTimeout","l","Instruction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89bd3de7.chunk.js","sourcesContent":["import React from 'react';\n/** @jsx jsx */import { css, jsx } from \"@emotion/core\";\n\nconst QuestionCss = css`\n    justify-content: center;\n    font-family: 'Luckiest Guy', cursive;\n    font-size: 36px;\n    background-color: gray;\n    padding: 20px;\n    width: 80px;\n`;\n\nconst Question = (props) => (\n    <div css={QuestionCss}>\n        {props.letter}\n    </div>\n)\n\nexport default Question;\n","import React from 'react';\n/** @jsx jsx */import { css, jsx } from \"@emotion/core\";\n\nconst InstructionsCss = css`\n\n`;\n\nexport default (props) => {    \n    return <div css={InstructionsCss}>\n        {props.instructionText}\n    </div>\n}\n","import React from 'react';\n/** @jsx jsx */import { css, jsx } from \"@emotion/core\";\n\nconst inputFormStyle = css`\n    font-family: 'Luckiest Guy', cursive;\n    font-size: 36px;\n    background-color: #333;\n    padding: 20px;\n    width: 80px;\n    color: #aaa;\n    text-align: center;\n    justify-content: center;\n`;\n\nconst InnerTextInput = React.forwardRef((props, ref) => {\n    \n    const changeHandler = e => props.onChange(e.target.value.toUpperCase());\n    \n    return <input \n        css={inputFormStyle}\n        ref={ref}\n        type='text' \n        value={props.value}\n        onChange={changeHandler}\n        disabled={!props.enabled}\n    />\n});\n\nconst FocusableEnableableTextInput = props => {\n    const ref = React.useRef(null);\n\n    React.useEffect(() => {\n        if(ref.current) {\n            if(props.giveFocus) {\n                ref.current.focus();\n            } else {\n                ref.current.blur();\n            }\n        }\n    })\n\n    return <InnerTextInput\n        ref={ref}\n        value={props.value}\n        onChange={props.onChange}\n        enabled={props.enabled}\n    />\n}\n\nexport default FocusableEnableableTextInput;","import React from 'react';\n/** @jsx jsx */import { css, jsx } from \"@emotion/core\";\n\nconst wrapperStyle = css`\n    width: 600px;\n`;\n\nconst outerStyle = css`\n    width: 100%;\n    background-color: #eee;\n    //padding: 3px;\n    //border-radius: 3px;\n    //box-shadow: inset 0 1px 3px rgba(0, 0, 0, .2)\n`;\n\n\n\nconst Progress = React.forwardRef((props, ref) => {\n    //let innerStyleMod = innerStyle;\n    // innerStyleMod += css`\n    //     width: ${props.value}\n    // `;\n\n    const innerStyle = css`\n        display: block;\n        height: 8px;\n        background-color: #333;\n        //border-radius: 3px;\n        width: ${props.value}%;\n        transition: width ${props.time}ms ease-in-out;\n    `;\n\n    return <div css={wrapperStyle}>\n        <div css={outerStyle}>\n            <span ref={ref} css={innerStyle} onAnimationEnd={() => console.log('animend')}></span>\n        </div>\n    </div>\n});\n\nexport default Progress","\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n}\n\nconst alphabetHelper = Array(26).fill('A');\nconst alphabet = alphabetHelper.map((c,i) => String.fromCharCode(c.charCodeAt(0) + i));\nconst questions = alphabet.slice(1, alphabet.length-1);\n\nfunction getRandomQuestionLetter() {\n    return questions[getRandomIntInclusive(0, questions.length - 1)];\n}\n\nfunction getCorrectPreLetter(questionLetter) {\n    return String.fromCharCode(questionLetter.charCodeAt(0) - 1);\n}\n\nfunction getCorrectPostLetter(questionLetter) {\n    return String.fromCharCode(questionLetter.charCodeAt(0) + 1);\n}\n\nexport { \n    getRandomInt,\n    getRandomIntInclusive,\n    alphabet,\n    questions,\n    getRandomQuestionLetter,\n    getCorrectPreLetter,\n    getCorrectPostLetter,\n}","import React, { useEffect, useReducer } from 'react';\nimport Question from './Question';\nimport Instruction from './Instruction';\nimport FocusableEnableableTextInput from './FocusableEnableableTextInput';\n/** @jsx jsx */import { css, jsx } from \"@emotion/core\";\nimport Progress from './Progress';\nimport { \n    getRandomQuestionLetter,\n    getCorrectPreLetter,\n    getCorrectPostLetter,\n} from './AlfaUtils';\n\nconst appStyle = css`\n  text-align: center;  \n`;\n\nconst appHeaderCss = css`\n  font-family: 'Times new Roman';\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: calc(28px + 2vmin);\n  color: white;\n  padding-top: 10px;\n`;\n\nconst playfieldStyle = css`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst progressStyle = css`\n\n`;\n\n\n\nconst initialStateInit = () => {\n    const questionLetter = getRandomQuestionLetter();\n    const instructionText = `Geef de letter die voor ${questionLetter} komt.`;\n\n    return {\n        gameState: 'ENTERING_FIRST_LETTER',\n        questionLetter,\n        instructionText,\n        preLetter: '',\n        postLetter: '',\n        preLetterFocus: true,\n        postLetterFocus: false,\n        preLetterEnabled: true,\n        postLetterEnabled: false,\n    }\n}\n\nfunction reducer(state, action) {\n    console.log('in reducer, state: ')\n    console.log(state);\n    console.log('in reducer, action: ');\n    console.log(action);\n    switch (action.type) {\n        case 'ENTERED_FIRST_LETTER_ACTION':\n            const preLetter = action.preLetter.toUpperCase();\n            const correctPreLetter = getCorrectPreLetter(state.questionLetter);\n\n            if(preLetter === correctPreLetter) {\n                return {\n                    ...state,\n                    gameState: 'ENTERING_SECOND_LETTER',\n                    instructionText: `Juist! Geef nu de letter die na ${state.questionLetter} komt.`,\n                    preLetter,\n                    preLetterFocus: false,\n                    preLetterEnabled: false,\n                    postLetterFocus: true,\n                    postLetterEnabled: true,\n                }   \n            } else {\n                return {\n                    ...state,\n                    gameState: 'WRONG_AFTER_FIRST_LETTER',\n                    instructionText: `Fout! Niet ${preLetter} maar ${correctPreLetter} komt voor ${state.questionLetter}!`,\n                    preLetter,\n                    preLetterFocus: false,\n                    postLetterFocus: true,\n                    preLetterEnabled: false,\n                    postLetterEnabled: false,\n                }\n            }\n        case 'ENTERED_SECOND_LETTER_ACTION':\n            const postLetter = action.postLetter.toUpperCase();\n            const correctPreLetter2 = getCorrectPreLetter(state.questionLetter);\n            const correctPostLetter = getCorrectPostLetter(state.questionLetter);\n            if(postLetter === correctPostLetter) {\n                return {\n                    ...state,\n                    gameState: 'CORRECT',\n                    instructionText: `${correctPreLetter2} ${state.questionLetter} ${correctPostLetter} is inderdaad juist!`,\n                    postLetter,\n                    postLetterFocus: false,\n                    postLetterEnabled: false,\n                }\n            } else {\n                return {\n                    ...state,\n                    gameState: 'WRONG_AFTER_SECOND_LETTER',\n                    instructionText: `Fout! Niet ${postLetter} maar ${correctPostLetter} komt na ${state.questionLetter}!`,\n                    postLetter,\n                    postLetterFocus: false,\n                    postLetterEnabled: false,\n                }\n            }\n        case 'RESTART_ACTION':\n            return initialStateInit();\n        default:\n            console.log(\"Unknown gameState in reducer! This shouldn't happen!\");\n    }\n    console.log('before return reducer');\n    console.log(state);\n    return state;\n}\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, null, initialStateInit);\n    console.log('in app');\n    console.log(state);\n    const preLetterHandler = l => dispatch({ type: 'ENTERED_FIRST_LETTER_ACTION', preLetter: l });\n    const postLetterHandler = l => dispatch( {type: 'ENTERED_SECOND_LETTER_ACTION', postLetter: l })\n\n    useEffect(() => {\n        if(state.gameState === 'CORRECT' \n        || state.gameState === 'WRONG_AFTER_FIRST_LETTER'\n        || state.gameState === 'WRONG_AFTER_SECOND_LETTER') {\n            console.log('restarting in 1.5 seconds...');\n            setTimeout(() => {\n                dispatch( {type: 'RESTART_ACTION'} );\n            }, 1500);\n        }\n    });\n    \n    return <div css={appStyle}>\n    <header css={appHeaderCss}>\n      {/* <h1>Alfabet Trainer</h1> */}\n      <div css={playfieldStyle}>\n        <FocusableEnableableTextInput \n            onChange={preLetterHandler}\n            value={state.preLetter}\n            enabled={state.preLetterEnabled}\n            giveFocus={state.preLetterFocus}\n        />\n        <Question letter={state.questionLetter} />\n        <FocusableEnableableTextInput\n            onChange={postLetterHandler}\n            value={state.postLetter}\n            enabled={state.postLetterEnabled}\n            giveFocus={state.postLetterFocus}\n        />\n      </div>\n      <Instruction instructionText={state.instructionText} />\n      {/* <Progress ref={refProgress} /> */}\n      {/* <Progress ref={refProgress} value={progressState.value} time={progressState.time} /> */}\n    </header>\n  </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}